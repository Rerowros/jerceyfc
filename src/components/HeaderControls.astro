---
// src/components/HeaderControls.astro
---
<button id="gos-view-toggle" class="text-sm font-semibold px-3 py-1.5 rounded-md bg-background hover:bg-foreground/10 transition-colors" title="ГОСТ-версия">
  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block -mt-0.5 mr-1" viewBox="0 0 24 24" fill="currentColor">
    <path d="M4 21h16v-2H4v2zm0-3h2v-7h2v7h4v-7h2v7h4v-7h2v7h2v-9L12 3L2 9v9zm0-11.24L12 5.5l8 4.26V7H4v-.24zM12 7.5L6.47 10h11.06L12 7.5z"></path>
  </svg>
  <span class="lang-ru">ГОСТ-версия</span>
  <span class="lang-en">Gov. standard</span>
</button>

  
  <div class="h-6 w-px bg-slate-300 dark:bg-slate-700"></div>


  <div id="palette-switcher" class="flex items-center gap-2">
    <button data-theme="indigo" class="h-5 w-5 rounded-full bg-[#4f46e5] ring-offset-background ring-offset-2 focus:ring-2 ring-slate-400 transition-all" title="Indigo"></button>
    <button data-theme="lavender" class="h-5 w-5 rounded-full bg-[#8c6df5] ring-offset-background ring-offset-2 focus:ring-2 ring-slate-400 transition-all" title="Lavender"></button>
    <button data-theme="mint" class="h-5 w-5 rounded-full bg-[#25b083] ring-offset-background ring-offset-2 focus:ring-2 ring-slate-400 transition-all" title="Mint"></button>
    <button data-theme="sunny" class="h-5 w-5 rounded-full bg-[#facc15] ring-offset-background ring-offset-2 focus:ring-2 ring-slate-400 transition-all" title="Sunny"></button>
  </div>
  
  <div class="h-6 w-px bg-slate-300 dark:bg-slate-700"></div>

  <!-- Переключатель языка -->
  <button id="lang-toggle" class="font-semibold text-sm px-3 py-1.5 rounded-md bg-background hover:bg-foreground/10 transition-colors">
    <span class="lang-ru">EN</span>
    <span class="lang-en">RU</span>
  </button>

  <!-- Переключатель темы -->
  <button id="theme-toggle" class="text-2xl relative overflow-hidden">
    <span id="theme-icon" class="theme-icon inline-block relative w-7 h-7">
      <svg class="absolute inset-0 w-full h-full" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g id="sun-group">
          <circle cx="16" cy="16" r="8" fill="#facc15" />
          <g>
            <line x1="16" y1="2" x2="16" y2="7" stroke="#facc15" stroke-width="2" />
            <line x1="16" y1="25" x2="16" y2="30" stroke="#facc15" stroke-width="2" />
            <line x1="2" y1="16" x2="7" y2="16" stroke="#facc15" stroke-width="2" />
            <line x1="25" y1="16" x2="30" y2="16" stroke="#facc15" stroke-width="2" />
            <line x1="6.34" y1="6.34" x2="10.1" y2="10.1" stroke="#facc15" stroke-width="2" />
            <line x1="21.9" y1="21.9" x2="25.66" y2="25.66" stroke="#facc15" stroke-width="2" />
            <line x1="6.34" y1="25.66" x2="10.1" y2="21.9" stroke="#facc15" stroke-width="2" />
            <line x1="21.9" y1="10.1" x2="25.66" y2="6.34" stroke="#facc15" stroke-width="2" />
          </g>
        </g>
        <g id="moon-group">
          <path d="M22 16a6 6 0 1 1-8-8c0 4.42 3.58 8 8 8z" fill="#4f46e5" />
        </g>
      </svg>
    </span>
  </button>
</div>

<script is:inline>
  function initializeHeaderControls() {
    const gosViewToggle = document.getElementById('gos-view-toggle');
    if (gosViewToggle) {
      function updateGosButtonText() {
        const isGosView = document.documentElement.dataset.view === 'gos';
        const ruText = gosViewToggle.querySelector('.lang-ru');
        const enText = gosViewToggle.querySelector('.lang-en');
        if (isGosView) {
          ruText.textContent = 'Стандартная версия';
          enText.textContent = 'Standard View';
        } else {
          ruText.textContent = 'ГОСТ-версия';
          enText.textContent = 'Gov. standard';
        }
      }

      updateGosButtonText();

      gosViewToggle.addEventListener('click', () => {
        const isGosView = document.documentElement.dataset.view === 'gos';
        if (isGosView) {
          // Выключаем режим
          localStorage.removeItem('view');
        } else {
          // Включаем режим
          localStorage.setItem('view', 'gos');
        }
        // Перезагружаем страницу, чтобы применились все изменения стилей из <head>
        window.location.reload();
      });
    }

    if (document.documentElement.dataset.view === 'gos') {
      return; 
    }

    // --- ЛОГИКА ПЕРЕКЛЮЧЕНИЯ ТЕМЫ (DARK/LIGHT) ---
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      const themeIcon = document.getElementById('theme-icon');
      const sunGroup = themeIcon.querySelector('#sun-group');
      const moonGroup = themeIcon.querySelector('#moon-group');
      function setIcon(isDark) {
        if (isDark) {
          sunGroup.classList.add('theme-sun-leave');
          moonGroup.classList.add('theme-moon-enter');
          sunGroup.classList.remove('theme-sun-enter');
          moonGroup.classList.remove('theme-moon-leave');
        } else {
          sunGroup.classList.add('theme-sun-enter');
          moonGroup.classList.add('theme-moon-leave');
          sunGroup.classList.remove('theme-sun-leave');
          moonGroup.classList.remove('theme-moon-enter');
        }
      }
      themeToggle.addEventListener('click', () => {
        const isDark = !document.documentElement.classList.contains('dark');
        setIcon(isDark);
        // Небольшая задержка для анимации
        setTimeout(() => {
          document.documentElement.classList.toggle('dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
        }, 400); // Задержка равна длине анимации
      });
      setIcon(document.documentElement.classList.contains('dark'));
    }

    // --- ЛОГИКА ПЕРЕКЛЮЧЕНИЯ ЯЗЫКА ---
    const langToggle = document.getElementById('lang-toggle');
    if (langToggle) {
      langToggle.addEventListener('click', () => {
        const currentLang = document.documentElement.lang;
        const newLang = currentLang === 'ru' ? 'en' : 'ru';
        document.documentElement.lang = newLang;
        localStorage.setItem('lang', newLang);
        // Т.к. текст на кнопке гос-режима зависит от языка, обновляем его
        if(gosViewToggle) {
          updateGosButtonText();
        }
      });
    }

    const paletteSwitcher = document.getElementById('palette-switcher');
    if (paletteSwitcher) {
      function updateActivePalette() {
        const currentTheme = document.documentElement.getAttribute('data-theme') || 'indigo';
        const buttons = paletteSwitcher.querySelectorAll('button');
        buttons.forEach(button => {
          if (button.dataset.theme === currentTheme) {
            button.classList.add('ring-2', 'ring-primary');
          } else {
            button.classList.remove('ring-2', 'ring-primary');
          }
        });
      }
      updateActivePalette();

      paletteSwitcher.addEventListener('click', (e) => {
        if (e.target instanceof HTMLElement && e.target.tagName === 'BUTTON') {
          const theme = e.target.dataset.theme;
          if (theme) {
            document.documentElement.setAttribute('data-theme', theme);
            localStorage.setItem('palette', theme);
            updateActivePalette();
          }
        }
      });
    }
  }

  // Инициализируем при загрузке страницы
  document.addEventListener('DOMContentLoaded', initializeHeaderControls);
  
  // Переинициализируем при переходах Astro
  document.addEventListener('astro:page-load', initializeHeaderControls);
</script>
